version: 2

references:
  container_config: &container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        # environment variables for all commands executed in the primary container
        environment:
          GITHUB_TEAM_NAME_SLUG: cloud-platform
          APPLICATION_DEPLOY_NAME: reference-app

  build_docker_image: &build_docker_image
    run:
      name: Build reference-app docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push reference-app docker image
      command: |
        login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
        ${login}

        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "feature/multi-pipeline" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
        fi

  authenticate_with_cluster: &auth_to_cluster
    run:
      name: Authenticate against Kubernetes cluster
      command: |
        echo -n ${KUBE_ENV_PRODUCTION_CACERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${KUBE_ENV_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${KUBE_ENV_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${KUBE_ENV_PRODUCTION_TOKEN
        kubectl config use-context ${KUBE_ENV_CLUSTER_NAME}

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *build_docker_image
      - *push_docker_image

  staging_deploy:
    <<: *container_config
    steps:
      - checkout
      - *auth_to_cluster
      - run:
          name: Kubectl setup
          command: |
            kubectl config set-context ${KUBE_ENV_CLUSTER_NAME} --cluster=${KUBE_ENV_CLUSTER_NAME} --user=circleci --namespace=${KUBE_ENV_STAGING_NAMESPACE}
            kubectl get pods
            helm init --tiller-namespace ${KUBE_ENV_STAGING_NAMESPACE} --client-only
            helm list --tiller-namespace ${KUBE_ENV_STAGING_NAMESPACE}
      - deploy:
          name: Helm deployment
          command: |
            helm upgrade ${APPLICATON_DEPLOY_NAME} ./helm_deploy/django-app/. \
                          --install \
                          --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                          --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                          --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \
                          --set image.tag="${CIRCLE_SHA1}" \
                          --set deploy.host="${KUBE_ENV_STAGING_URL}" \
                          --set replicaCount="1" \
                          --debug
            kubectl get pods --show-all

  production_deploy:
    <<: *container_config
    steps:
      - checkout
      - *auth_to_cluster
      - run:
          name: Kubectl setup
          command: |
            kubectl config set-context ${KUBE_ENV_CLUSTER_NAME} --cluster=${KUBE_ENV_CLUSTER_NAME} --user=circleci --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE}
            kubectl get pods
            helm init --tiller-namespace ${KUBE_ENV_PRODUCTION_NAMESPACE} --client-only
            helm list --tiller-namespace ${KUBE_ENV_PRODUCTION_NAMESPACE}
      - deploy:
          name: Helm deployment
          command: |
            helm upgrade ${APPLICATON_DEPLOY_NAME} ./helm_deploy/django-app/. \
                          --install \
                          --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                          --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                          --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \
                          --set image.tag="${CIRCLE_SHA1}" \
                          --set deploy.host="${KUBE_ENV_PROD_URL}" \
                          --set replicaCount="2" \
                          --debug
            kubectl get pods --show-all
